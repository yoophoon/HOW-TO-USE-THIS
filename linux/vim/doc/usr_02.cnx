*usr_02.txt*	适用于 Vim version 9.1.  最后修订: 2025 Feb 01

		     VIM USER MANUAL - by Bram Moolenaar

			    The first steps in Vim


这个章节只提供足够的信息用于使用Vim编辑文件. 信息没那么全面但足以用于编辑.
用些时间练习这些命令, 它们为接下来的内容打下基础. 

|02.1|	第一次运行Vim
|02.2|	插入文本
|02.3|	光标移动
|02.4|	删除字符
|02.5|	撤销与重做
|02.6|	其他编辑命令
|02.7|	退出
|02.8|	查找帮助

     Next chapter: |usr_03.txt|  Moving around
 Previous chapter: |usr_01.txt|  About the manuals
Table of contents: |usr_toc.txt|

==============================================================================
*02.1*	第一次运行Vim

可以使用这个命令启动Vim: >

	gvim file.txt

在UNIX中可以在任意命令提示符输入这个命令. 如果在Windows中则要打开命令提示符并
输入命令. 
   无论那种情况, Vim开始编辑一个名为file.txt的文件. 因为这是一个新文件, Vim会
显示一个空白窗口. 下面就是屏幕将会显示的样子: 

	+---------------------------------------+
	|#					|
	|~					|
	|~					|
	|~					|
	|~					|
	|"file.txt" [New file]			|
	+---------------------------------------+
		('#' is the cursor position.)

波浪号(~)所在的行表明这些行不属于当前文件. 换句话说, 当Vim超出文件显示范围时就会
显示波浪号行. 屏幕底部, 消息行表明文件的名称是file.txt并表明正在创建一个新文件.
消息信息是临时的并且会被其他信息覆盖. 


THE VIM COMMAND

gvim命令会让编辑器创建一个用于编辑的新窗口. 如果使用下面命令: >

	vim file.txt

编辑器将会出现在命令窗口内部. 换句话说, 如果在xterm内部运行这个命令编辑器就会
使用xterm窗口. 如果使用MS-Windows命令提示符窗口, 编辑器就会出现在这个窗口内部. 
两个版本创造的窗口中的文本看起来会是一样的, 但使用gvim的窗口拥有额外的特性, 
比如菜单栏. 后续会对此有更多的阐述. 

==============================================================================
*02.2*	插入文本

Vim编辑器是模态编辑器. 这意味着编辑器会基于所在模式有不同的表现. 最基础的两个
模式是普通模式及插入模式. 普通模式中键入的字符都是命令. 插入模式中字符则会被当作
文本插入. 
   由于刚启动, Vim会处于普通模式. 可以键入"i"命令启用插入模式 (i对应Insert).
之后就可以输入文本了. 它会被插入到文件中. 不要担心犯错, 之后可以纠正这些错误. 
键入下面内容可以输入后续程序的短句: >

	iA very intelligent turtle
	Found programming UNIX a hurdle

在键入"turtle"之后需要按下<Enter>键开启新行. 最终按<Esc>键停止插入模式并回到
普通模式. 现在Vim窗口中存在两行文本: 

	+---------------------------------------+
	|A very intelligent turtle		|
	|Found programming UNIX a hurdle	|
	|~					|
	|~					|
	|					|
	+---------------------------------------+


WHAT IS THE MODE?

键入下面命令查看所处模式: >

	:set showmode

注意到当键入冒号时Vim移动光标到窗口的最后一行.那是键入冒号命令的地方(以冒号开始
的命令). 按下<Enter>键位完成命令输入(所有以冒号开始的命令都以这种方式完成输入)
   现在, 如果键入"i"命令Vim会在窗口的底部显示--INSERT--. 这表明Vim处于插入模式.

	+---------------------------------------+
	|A very intelligent turtle		|
	|Found programming UNIX a hurdle	|
	|~					|
	|~					|
	|-- INSERT --				|
	+---------------------------------------+

如果按下<Esc>键位回到普通模式, 最后一行会被置空. 


GETTING OUT OF TROUBLE

Vim新手面对的问题其中一个就是模式困惑, 这是因为忘记Vim所处模式或偶然键入改变模式
命令导致的. 无论所处什么模式, Vim都可以通过按下<Esc>键位回到普通模式. 有时需要
按两次<Esc>键. 如果Vim没有回应, 则已经处于普通模式了. 

==============================================================================
*02.3*	光标移动

在返回普通模式之后, 可以使用下面这些按键移动光标: 

	h   left						*hjkl*
	j   down
	k   up
	l   right

首先, 这些命令可能表现的像被随机选中的. 毕竟, 谁听说过使用l表示right呢?
但事实上, 这样做有一个非常好的原因: 移动光标是编辑器中最常见的事情并且这些按键
在右手初始键位. 换句话说, 这些命令被放置在可以最快键入它们的位置(尤其是当使用
十指键入时).

	注意:
	也能使用方向键移动光标. 然而, 如果这样做会极度拖慢编辑工作因为要将手从
	文本按键移动到方向按键以按下这些按键. 试想下一个小时内这样操作数百次, 
	这将明显耗费大量时间. 
	   此外, 有些键盘并没有方向键或它们的方向键位于特殊的地方; 因此, 了解
	hjkl按键的作用在这些情况下是很有帮助的. 

一个记住这些命令的方式是h在左边, l在右边而j则向下. 像图片中展示的这样: >

		       k
		   h     l
		     j

学习这些命令最好的方式是多使用它们. 使用"i"命令插入一些多行文本. 之后使用
hjkl按键移动光标并在某个位置插入单词. 不要忘记按<Esc>键回到普通模式. |vimtutor|
也是一个学习Vim的很好的方式. 

For Japanese users, Hiroshi Iwatani suggested using this:

			Komsomolsk
			    ^
			    |
	   Huan Ho	<--- --->  Los Angeles
	(Yellow river)	    |
			    v
			  Java (the island, not the programming language)

==============================================================================
*02.4*	删除字符

移动光标到字符上并按下"x"键即可删除字符.(这传承了使用打字机时代的操作, 通过键入
xxxx删除光标位置的文本) 比如, 移动光标到第一行的开始位置并键入xxxxxxx(七个x)以
删除"A very ". 结果看起来应该会是这样: 

	+---------------------------------------+
	|intelligent turtle			|
	|Found programming UNIX a hurdle	|
	|~					|
	|~					|
	|					|
	+---------------------------------------+

现在可以插入新的文本, 比如键入下面的内容: >

	iA young <Esc>

这开始一个插入(i)并插入单词"A young"最后退出插入模式 (结尾的<Esc>). 结果如下: 

	+---------------------------------------+
	|A young intelligent turtle		|
	|Found programming UNIX a hurdle	|
	|~					|
	|~					|
	|					|
	+---------------------------------------+


DELETING A LINE

使用"dd"命令删除整行. 后续的内容之后会被向上移动填充空隙: 

	+---------------------------------------+
	|Found programming UNIX a hurdle	|
	|~					|
	|~					|
	|~					|
	|					|
	+---------------------------------------+


DELETING A LINE BREAK

在Vim中可以将两行文本联合起来, 这意味着文本里面的换行符会被删除. "J"命令用来做
这个的. 
   获取下面两行: 

	A young intelligent ~
	turtle ~

移动光标到第一行并按下"J"键: 

	A young intelligent turtle ~

==============================================================================
*02.5*	撤销与重做

假设你删除太多内容. 当然可以重新键入这些内容, 但存在更简单的方法. "u"命令撤销
上一次编辑. 观察下面的操作: 在使用"dd"命令删除第一行之后, "u"命令会将它带回来. 
   另一个: 移动光标到第一行的A位置处: 

	A young intelligent turtle ~

现在键入 xxxxxxx 删除"A young". 结果就像下面这样: 

	 intelligent turtle ~

键入"u"撤销上一次删除命令. 那个删除命令移除了g, 因此撤销会恢复这个字符. 

	g intelligent turtle ~

下一个"u"命令恢复上上个被删除的字符: 

	ng intelligent turtle ~

再下个"u"命令恢复字符u, 以此类推: 

	ung intelligent turtle ~
	oung intelligent turtle ~
	young intelligent turtle ~
	 young intelligent turtle ~
	A young intelligent turtle ~

	注意:
	如果键入"u"两次且结果为文本没有发生变动, 这是因为配置了Vi兼容模式.
	查阅文档|not-compatible|修复这个问题. 
	   这段文本假定使用"The Vim Way". 如果倾向使用古老的Vi方式, 则需要注意
	文本的细微区别. 


REDO

如果撤销了太多次, 可以按下CTRL-R(重做)反转前面的命令. 换句话说, 它会撤销上次
撤销操作. 按CTRL-R两次查看这个命令的行为. 字符A及后续的空格消失了: 

	young intelligent turtle ~

有一个特殊版本的撤销命令, "U"(撤销行)命令. 撤销行命令撤销所有对于上一行进行的
编辑改动. 键入两次命令取消前面的"U"命令. 

	A very intelligent turtle ~
	  xxxx				Delete very

	A intelligent turtle ~
		      xxxxxx		Delete turtle

	A intelligent ~
					Restore line with "U"
	A very intelligent turtle ~
					Undo "U" with "u"
	A intelligent ~

"U"命令本身是一个修改命令, 这能被"u"命令撤销及被CTRL-R重做. 这可能有点令人困惑.
别担心, 使用"u"和CTRL-R可以恢复到任意之前的状态. 更多的内容再章节|32.2|. 

==============================================================================
*02.6*	其他编辑命令

Vim有大量修改文本的命令. 查阅|Q_in|及下面的内容. 
这里有部分经常用到的命令. 


APPENDING

"i"命令在光标所处字符前面插入字符. 这没问题; 但如果想要在行尾添加内容该怎么办? 
这样就需要在光标后面插入文本. 这可以通过"a"命令实现 (append). 
   比如, 修改下面一行

	and that's not saying much for the turtle. ~
为
	and that's not saying much for the turtle!!! ~

移动光标到行尾处的.位置. 然后键入"x"删除这个句号.现在光标位置在行尾处单词turtle
的字符e上. 现在键入 >

	a!!!<Esc>

在trutle的e后面追加三个感叹号: 

	and that's not saying much for the turtle!!! ~


OPENING UP A NEW LINE

"o"命令在光标下方创建一个新的、空的行并使Vim进入插入模式.然后可以为新行键入文本.
   假设光标在这两行第一行的某个位置: 

	A very intelligent turtle ~
	Found programming UNIX a hurdle ~

如果现在使用"o"命令并键入新文本: >

	oThat liked using Vim<Esc>

结果就像下面这样: 

	A very intelligent turtle ~
	That liked using Vim ~
	Found programming UNIX a hurdle ~

"O"命令 (大写) 在光标上方开启新行. 


USING A COUNT

假设想要向上移动9行. 可以键入"kkkkkkkkk"或者输入命令"9k". 事实上, 可以在许多
命令前面添加数字. 本章的前面的内容, 比如, 通过键入"a!!!<Esc>"添加三个感叹号到
行尾. 实现这个效果的另一种方式是使用命令"3a!<Esc>". 计数3表明命令后续触发三次
效果. 相似的, 使用命令"3x"删除三个字符. 计数总是会出现在它被应用的命令前面. 

==============================================================================
*02.7*	退出Getting out

使用"ZZ"命令退出Vim. 这个命令会将缓冲区内容写入文件并退出. 

	注意:
	与许多其他编辑器不同的是, Vim不会自动创建备份文件. 如果键入"ZZ", 缓冲区
	做出的修改将会被提交并且没有回转的可能. 可以配置Vim编辑器生成备份文件. 
	查阅文档|07.4|. 


DISCARDING CHANGES

有时在进行一系列的修改之后突然意识到改动之前的内容更好. 不用担心; Vim有退出并
抛弃修改内容的命令: >

	:q!

不要忘记按下<Enter>完成命令的输入. 

对于插入的内容的细节, 命令由三部分组成: 冒号(:)用于进入命令行模式;q命令用于告诉
编辑器退出及覆盖命令修饰符 (!).
   使用覆盖命令修饰符是因为Vim不好处理抛弃修改操作. 如果只是键入":q", Vim会显示
错误消息并拒绝退出: 

	E37: No write since last change (use ! to override) ~

通过指定覆盖命令, 相当于告诉Vim, "我知道我要做的事很蠢, 但我想要这么做"

如果想要继续使用Vim编辑: ":e!"命令会重载文件的初始版本. 

==============================================================================
*02.8*	查找帮助

所有想要知道的内容都可以在Vim帮助文件中被找到. 不好害怕询问!

如果知道正在查找的内容, 通常使用帮助系统会比使用谷歌更轻松查找它. 因为主题跟着
确切的样式指导. 

此外, 帮助文档还有属于Vim特定版本的优势. 这不会查找到后续被添加到Vim的命令信息. 
用户用不上这些新添加命令的帮助文档. 

使用下面命令获取通用帮助内容: >

	:help

使用第一个功能键<F1>也能打开帮助文档矿口. 如果键盘上有<Help>按键, 这可能有同样的
作用. 
   如果不提供主题, ":help"显示通用帮助窗口. Vim的创造者对帮助系统做了非常聪明
(懒惰)的事情: 他们把帮助窗口当作一个普通的编辑窗口. 这使得帮助窗口可以使用所有
普通Vim命令在帮助信息中移动. 因此, hjkl分别为想左、下、上、右移动. 
   使用与退出编辑器同样的命令"ZZ"退出帮助窗口. 这只会关闭帮助窗口不会退出Vim. 

当阅读帮助文本时, 会注意到一些文本被竖线围住 (比如, |help|). 这表示一个超链接. 
如果将光标放置竖线中间的任意位置并按下CTRL-](跳转至标签), 帮助系统会跳转到超链接
指向的主题. (因为不方便在这讨论的原因, Vim超链接的术语是标签. 因此CTRL-]跳转至
光标处单词指定的标签的位置) 
   经过一系列跳转之后, 如果想要返回原位置. CTRL-T(弹出标签栈)会跳转到原来的位置. 
CTRL-O(跳转至上一个位置)在这里也非常有效. 
   在帮助屏幕的顶部, 有个*help.txt*标记. 在"*"字符中间的名称被帮助系统用来定义
标签 (超链接的目标) >
  html里面超链接对应锚点, Vim帮助系统则是超链接对应标签, 其背后跳转都是标签驱动
<   查阅章节|29.1|获取关于使用标签的详细信息.

使用下面命令获取指定主题的帮助信息: >

	:help {subject}

比如, 输入下面的命令获取"x"命令的帮助信息: >

	:help x

使用下面命令查找如何删除文本: >

	:help deleting

使用下面命令获取所有Vim命令的完整索引: >

	:help index

当需要获取控制字符命令的帮助信息(比如CTRL-A)时, 需要使用前缀"CTRL-"拼凑帮助主题
>
	:help CTRL-A

Vim编辑器有许多不同的模式. 帮助系统默认的显示普通模式命令. 比如, 下面的命令显示
普通模式CTRL-H命令的帮助信息: >

	:help CTRL-H

使用模式前缀标识其他模式. 如果想要插入模式型式的帮助信息, 使用"i_". 如使用下面
命令查询插入模式的CTRL-H帮助信息: >

	:help i_CTRL-H

当启动Vim编辑器时, 可以使用多个命令行参数. 这些都以横杆(-)开头. 比如, 使用下面
命令查找-t参数的作用: >

	:help -t

Vim编辑器有许多选项让用户配置和自定义编辑器. 如果想要选项的帮助信息, 需要使用
单引号标记包住选项名称. 比如, 使用下面命令查找'number'选项的作用: >

	:help 'number'

所有模式的前缀表可以在下面找到: |help-summary|. 

特殊按键则用单角括号包住. 比如, 使用下面命令查找上箭头按键在插入模式的帮助文档:
>

	:help i_<Up>

如果看见不明白的错误消息, 比如:

	E37: No write since last change (use ! to override) ~

可以使用消息开头的错误ID查找关于该错误的帮助信息: >

	:help E37


总结:							*help-summary*  >

1) 在键入主题之后使用Ctrl-D让Vim显示所有可用的主题. 
   或按下Tab键进行补全: >
	:help some<Tab>
<   关于如何使用帮助系统的更多信息: >
	:help helphelp

2) 跳转至竖线中链接指向的相关帮助文档.可以从帮助参考跳转至用户手册(用户手册中的
   内容让用户已于理解接收但没有帮助参考详细). 比如, 下面的: >
	:help pattern.txt
<   可以在介绍中看见用户指引主题|03.9|及|usr_27.txt|.

3) 选项被包括在单引号中. 查找list选项的帮助主题: >
	:help 'list'
<   如果只知道正在查找某个选项, 可以使用下面命令: >
	:help options.txt
<   打开描述所有选项作用的帮助页面然后使用正则表达式进行搜索, 比如, textwidth.
    确切的选项有它们自己的命名空间, 比如, : >
	:help cpo-<letter>
<   对于'cpoptions'选项的相关标志设置, 用指定的标志替换<letter>, 比如: >
	:help cpo-;
<   对于'guioptions'选项的标志: >
	:help go-<letter>

4) 普通模式命令没有前缀. 例如使用下面命令跳转至"gt"命令的帮助页面: >
	:help gt

5) 插入模式命令以i_开始. 关于删除单词的帮助文档: >
	:help i_CTRL-W

6) 可是模式命令以v_开始. 关于跳转到可视区域另一端的帮助文档: >
	:help v_o

7) 命令行编辑及参数以c_开始. 关于使用命令参数 % 的帮助文档: >
	:help c_%

8) Ex-commands总是以":"开始, 因此可以使用下列命令跳转至":s"命令帮助文档: >
	:help :s

9) 特别用于调试的命令以">"开始. 对于"cont"调试命令跳转至帮助文档: >
	:help >cont

10) 按键组合. 它们通常以当个字母开始表明它们能被应用的模式. 比如: >
	:help i_CTRL-X
<    则会打开用于插入模式的CTRL-X命令组群, 这个命令被用于自动补全不同的内容. 
    注意, 确定的按键总是会被写成同样的形式, 比如, Control总是CTRL. 对于普通模式
    命令而言它们没有前缀且这个主题能通过:h CTRL-<Letter>获取. 比如, >
	:help CTRL-W
<    相反的 >
	:help c_CTRL-R
<    会描述在命令行模式键入命令时CTRL-R的作用, 以及 >
	:help v_CTRL-A
<    在可视模式中增加数字的说明, 以及 >
	:help g_CTRL-A
<    "g<C-A>"命令的说明(比如, 按下"g"之后按下<CTRL-A>). 这里的"g"代表普通模式
    命令总是在生效前期望第二个按键的命令, 这与以"z"开始的命令有些类似. 

11) 正则表达式项总是以/开始. 因此获取Vim正则表达式的"\+"量词的帮助文档: >
	:help /\+
<    如果需要知道关于正则表达式的所有信息, 可以阅读: >
	:help pattern.txt

12) 寄存器总是以"quote"开始. 查找关于特殊":"寄存器的帮助信息: >
	:help quote:

13) Vim脚本帮助信息可以通过下面命令获取: >
	:help eval.txt
<    语言某一确切的内容可以通过:h expr-X获取, 其中的"X"时当个字符, 比如: >
	:help expr-!
<    会打开Vim脚本描述"!"(逻辑否)操作符的帮助主题. 同样重要的是 >
	:help function-list
<    会获取所有可用函数的简短描述. Vim脚本的帮助主题总是会包含"()", 因此: >
	:help append()
<    谈论的是Vim脚本函数append而不是在如何在当前缓冲区添加文本.

14) 映射在帮助页面:h |map.txt|中被谈论. 使用 >
	:help mapmode-i
<    查找关于|:imap|命令的帮助文档. 此外使用:map-topic查找映射的确切的子主题. 
    比如: >
	:help :map-local
<    关于缓冲区局部映射文档或 >
	:help map-bar
<    关于映射中如何处理'|'符号的帮助文档. 

15) 命令定义在:h command-topic被谈论, 因此使用 >
	:help command-bar
<    查找关于自定义命令'!'参数的帮助文档.

16) 窗口管理命令总是以CTRL-W开始, 因此需要使用:h CTRL-W_letter查找相关帮助信息. 
    比如: >
	:help CTRL-W_p
<    关于移动上一个访问窗口的帮助文档. 也能访问 >
	:help windows.txt
<    并按自己的方式阅读(如果正在查找处理窗口的命令的话)

17) 使用|:helpgrep|搜索所有帮助页面 (及安装的插件帮助页面). 查阅文档|:helpgrep|
    获取如何使用该命令的文档. 
    搜索主题: >
	:helpgrep topic
<    这会跳转至第一个匹配该主题的文档. 要跳转至下个匹配的文档使用下列命令: >
	:cnext
<    所有匹配项都可以在quickfix窗口获取, 该窗口可以通过下面命令开启: >
	:copen
<    移动到关注的匹配项并按下Enter键可跳转至对应的帮助文档.

18) 用户手册. 手册以一种友好的方式为新手描述了帮助主题. 可以通过|usr_toc.txt|
    查找目录(这个目录可能在之前已经被阅读过了): >
	:help usr_toc.txt
<    浏览这些内容查找感兴趣的主题. "Digraphs"及"Entering special character"项在
    24章, 因此跳转至特定的帮助页面: >
	:help usr_24.txt
<    此外, 如果想要访问帮助西东的特定章节, 章节编号可以像下面这样直接被访问: >
	:help 10.1
<    这个命令会跳转到|usr_10.txt|的章节10.1并谈论记录宏的相关文档.

19) 高亮组. 总是以hl-groupname开始. 比如 >
	:help hl-WarningMsg
<    谈论警告信息高亮组.

20) 语法高亮被命令空间为:syn-topic. 比如 >
	:help :syn-conceal
<    谈论":syn"命令的conceal参数.

21) 快速修复命令通常以:c开始而定位列表命令则通常以:l开始

22) 自动命令时间可以通过它们的名称查找: >
	:help BufWinLeave
<    查看所有可能的事件: >
	:help autocommand-events

23) 命令行布尔选项参数总是以"-"开始. 因此关于Vim的-f命令选项参数的帮助文档使用: >
	:help -f

24) 可选特性总是以"+"开始. 查找关于conceal特性的帮助文档: >
	:help +conceal

25) 关于包含文件类型功能的文档通常以ft-<filetype>-<functionality>的形式获取. 
    因此 >
	:help ft-c-syntax
<    谈论C语法文件及它提供的选项. 有时会有omni函数的额外章节 >
	:help ft-php-omni
<    或文件类型插件 >
	:help ft-tex-plugin
<    都是可获取的.

26) 错误和警告代码可以直接在帮助系统中查找. 因此 >
	:help E297
<    会准确跳转到交换文件错误消息的描述, 及 >
	:help W10
<    谈论"Changing a readonly file"的警告信息. 然而, 这些错误代码有时不会被描述
    而只是与导致这些错误的命令列在一起. 因此: >
	:help E128
<    会跳转到|:function|命令.

27) 与Vim一起被发布的包的文档有package-<name>格式. 因此 >
	:help package-comment
<
    会跳转到包含注释插件及怎么启用它的文档.


==============================================================================

下一章: |usr_03.txt|  移动光标

Copyright: see |manual-copyright|  vim:tw=78:ts=8:noet:ft=help:norl:
